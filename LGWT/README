================================================================================
Learn Go with Tests
================================================================================

https://quii.gitbook.io/learn-go-with-tests

Notes and exercises while working through "Learn Go with Tests".


Chapter 1
--------------------------------------------------------------------------------

The basic TDD loop:

- write a test
- make the compiler pass
- run failing test and check the error message is meaningful
- write enough code to make the test pass
- refactor

Benefits:

- ensures relevant tests
- enables refactoring with the safety of tests
- exposes developer to error messages to ensure they are good
- tests serve as a clear spec of what the code does

Thoughts:

This seems like a more structured version of how I already code. The point
on how TDD ensures *relevant* tests (by writing them before not after), hits
home for me.

I've never thought about tests as a useful source of documentation before.
Usually because once mocking comes into the picture, it's easy for tests
to get complex and slightly unreadable. But I'll keep this idea in mind as
I continue with further chapters.


Chapter 2: Integers
--------------------------------------------------------------------------------

See the test file for an example of a 'Testable Example'
Nothing else to note for this chapter.


Chapter 3: Iteration
--------------------------------------------------------------------------------

- Benchmarks can be added to test files and run with `go test -bench=.`
- See the test file for this chapter for an example benchmark
- Strings in Go are immutable
    - frequent string operations (like concatenation) can get quite costly
    - strings.Builder is massively more performant

Thoughts:

- Having benchmarks conveniently available is super helpful.
- strings.Builder must be mutating a pointer rather than copying memory, 
  as is the default case with strings
- Will probably be worth rote memorising the strings package


Chapter 4: Arrays and Slices
--------------------------------------------------------------------------------

- The goal should not be to have as many tests as possible, but rather to
  have as much *confidence* as possible in your code base.
- Every test has a cost
- Go provides a nice coverage tool with `go test -cover`

Thoughts:

- I'm not sure about this:
    - "If you've been strict with TDD, you'll have close to 100% coverage"
    - Sounds sussy to me. What about side effecty code?
    - Will read on and find out

